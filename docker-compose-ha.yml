version: "2.4"
services:
  haproxy:
    image: haproxy:2.4
    container_name: haproxy
    depends_on:
      rabbit1:
        condition: service_healthy
      rabbit2:
        condition: service_healthy
      rabbit3:
        condition: service_healthy
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./haproxy/queue_ports.map:/etc/haproxy/queue_ports.map:ro
      - ./haproxy/port_map.map:/etc/haproxy/port_map.map
      - /var/run/haproxy.sock:/var/run/haproxy.sock
    ports:
      - "50000-50100:50000-50100"
    networks:
      - elk-net

  map-updater:
    build:
      context: ./haproxy
      dockerfile: Dockerfile.map
    container_name: haproxy-map-updater
    depends_on:
      haproxy:
        condition: service_started
    volumes:
      - ./haproxy/queue_ports.map:/etc/haproxy/queue_ports.map:ro
      - ./haproxy/port_map.map:/etc/haproxy/port_map.map
      - /var/run/haproxy.sock:/var/run/haproxy.sock
    entrypoint: ["/update_map.sh"]

  # ─ RabbitMQ 3-node Quorum cluster ──────────────────────────
  rabbit1:
    image: heidiks/rabbitmq-delayed-message-exchange:3.12.2-management
    hostname: rabbit1
    container_name: rabbit1
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME_PREFIX}rabbit1
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/data/rabbit1:/var/lib/rabbitmq/mnesia
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "${EXTERNAL_HAPROXY_PORT}:5672"
      - "${EXTERNAL_RABBITMQ_MANAGEMENT_PORT}:15672"
    networks:
      elk-net:
        aliases:
          - rabbit1
  rabbit2:
    image: heidiks/rabbitmq-delayed-message-exchange:3.12.2-management
    hostname: rabbit2
    container_name: rabbit2
    depends_on:
      rabbit1:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME_PREFIX}rabbit2
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/data/rabbit2:/var/lib/rabbitmq/mnesia
    entrypoint: >
      bash -c "
        rabbitmq-server -detached &&
        sleep 10 &&
        rabbitmqctl stop_app &&
        rabbitmqctl join_cluster ${RABBITMQ_NODENAME_PREFIX}rabbit1 &&
        rabbitmqctl start_app &&
        tail -f /dev/null
      "
    networks:
      elk-net:
        aliases:
          - rabbit2
  rabbit3:
    image: heidiks/rabbitmq-delayed-message-exchange:3.12.2-management
    hostname: rabbit3
    container_name: rabbit3
    depends_on:
      rabbit1:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME_PREFIX}rabbit3
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/data/rabbit3:/var/lib/rabbitmq/mnesia
    entrypoint: >
      bash -c "
        rabbitmq-server -detached &&
        sleep 10 &&
        rabbitmqctl stop_app &&
        rabbitmqctl join_cluster ${RABBITMQ_NODENAME_PREFIX}rabbit1 &&
        rabbitmqctl start_app &&
        tail -f /dev/null
      "
    networks:
      elk-net:
        aliases:
          - rabbit3

  rabbit-final:
    image: curlimages/curl:7.85.0
    depends_on:
      rabbit1:
        condition: service_healthy
      rabbit2:
        condition: service_healthy
      rabbit3:
        condition: service_healthy
    volumes:
      - ./rabbitmq/definitions.json:/definitions.json:ro
    entrypoint: >
      sh -c '
        echo "$(date) waiting for RabbitMQ cluster…";
        until curl -s -u "${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}" \
            http://rabbit1:15672/api/nodes | grep -q rabbit@rabbit3; do
          sleep 5;
        done;
        echo "$(date) importing definitions…";
        curl -u "${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}" \
             -H "Content-Type: application/json" \
             -X POST \
             --data-binary @/definitions.json \
             http://rabbit1:15672/api/definitions;
        echo "$(date) done.";
      '
  # ─ Elasticsearch ───────────────────────────────────────────
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    mem_limit: "8g"
    container_name: log_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    healthcheck:
      disable: true
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - elk-net

  es-init:
    image: curlimages/curl:7.85.0
    container_name: es-init
    depends_on:
      - elasticsearch
    entrypoint: >
      sh -c '
        echo "Waiting for Elasticsearch HTTP port…";
        until curl -sf http://elasticsearch:9200; do
          sleep 5;
        done;

        echo "Waiting for built-in ecs@mappings component template…";
        # @는 %40으로 인코딩해야 정확히 감지됩니다
        until curl -sf http://elasticsearch:9200/_component_template/ecs%40mappings; do
          sleep 5;
        done;

        echo "All prerequisites met – loading logs-default index template…";

        if response=$$(curl --fail-with-body -sS -X PUT \
             "http://elasticsearch:9200/_index_template/logs-default" \
             -H "Content-Type: application/json" \
             --data "@/templates/logs-default.json"); then
          echo "✅ Index template loaded.";
        else
          echo "❌ Failed to load index template:" >&2;
          echo "$$response" >&2;
          exit 1;
        fi
      '
    volumes:
      - ./es/templates/logs-default.json:/templates/logs-default.json:ro
    networks:
      - elk-net

  # ─ Logstash 4 instances ────────────────────────────────────
  logstash1:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash1
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
      - es-init
    volumes:
      - ./logstash/pipeline1:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) ES 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) 준비되면 Logstash 진짜 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net

  logstash2:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash2
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
      - es-init
    volumes:
      - ./logstash/pipeline1:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) ES 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) 준비되면 Logstash 진짜 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net

  logstash3:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash3
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
      - es-init
    volumes:
      - ./logstash/pipeline1:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) ES 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) 준비되면 Logstash 진짜 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net

  grafana:
    image: grafana/grafana-oss:latest
    depends_on:
      - elasticsearch
    ports:
      - "${EXTERNAL_GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP="false" # 일반 사용자 가입 금지
      - GF_AUTH_ANONYMOUS_ENABLED="true" # 익명 조회 허용

      # 익명 사용자 역할 추가
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      # 임베딩 허용 설정 추가
      - GF_SECURITY_ALLOW_EMBEDDING=true
      # X-Frame-Options 헤더 설정 제거
      - GF_SECURITY_X_FRAME_OPTIONS=

    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    networks:
      - elk-net
    restart: unless-stopped
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    networks:
      - elk-net

networks:
  elk-net:
    driver: bridge

volumes:
  grafana-data:
  redis-data:
  es-data:
