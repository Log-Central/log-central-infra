services:
  # ─ RabbitMQ 3-node Quorum cluster ──────────────────────────
  rabbit1:
    image: rabbitmq:3-management
    hostname: rabbit1
    container_name: rabbit1
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME_PREFIX}rabbit1
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/data/rabbit1:/var/lib/rabbitmq/mnesia
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    networks:
      elk-net:
        aliases:
          - rabbitmq
  rabbit2:
    image: rabbitmq:3-management
    hostname: rabbit2
    container_name: rabbit2
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME_PREFIX}rabbit2
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/data/rabbit2:/var/lib/rabbitmq/mnesia
    networks:
      elk-net:
        aliases:
          - rabbitmq
  rabbit3:
    image: rabbitmq:3-management
    hostname: rabbit3
    container_name: rabbit3
    environment:
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_NODENAME=${RABBITMQ_NODENAME_PREFIX}rabbit3
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/data/rabbit3:/var/lib/rabbitmq/mnesia
    networks:
      elk-net:
        aliases:
          - rabbitmq

  # ─ Elasticsearch ───────────────────────────────────────────
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: log_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    healthcheck:
      disable: true
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    networks:
      - elk-net

  es-init:
    image: curlimages/curl:7.85.0
    container_name: es-init
    depends_on:
      - elasticsearch
    entrypoint: >
      sh -c '
        echo "Waiting for Elasticsearch…";
        until curl -sf http://elasticsearch:9200; do sleep 5; done;
        echo "Elasticsearch is up – loading index template…";
        curl -sf -X PUT "http://elasticsearch:9200/_index_template/logs-default" \
             -H "Content-Type: application/json" \
             --data "@/templates/logs-default.json";
        echo "Index template loaded.";
      '
    volumes:
      - ./es/templates/logs-default.json:/templates/logs-default.json:ro
    networks:
      - elk-net

  # ─ Logstash 4 instances ────────────────────────────────────
  logstash1:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash1
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
    volumes:
      - ./logstash/pipeline1:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) ES 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) 준비되면 Logstash 진짜 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net

  logstash2:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash2
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
    volumes:
      - ./logstash/pipeline1:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) ES 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) 준비되면 Logstash 진짜 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net

  logstash3:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash3
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
    volumes:
      - ./logstash/pipeline1:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) ES 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) 준비되면 Logstash 진짜 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net
  logstash4:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash4
    depends_on:
      - rabbit1
      - rabbit2
      - rabbit3
    volumes:
      - ./logstash/pipeline4:/usr/share/logstash/pipeline
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    entrypoint: >
      bash -c "
        # 1) Elasticsearch 준비 대기
        /usr/local/bin/wait-for-it.sh elasticsearch:9200 --strict --timeout=120 &&
        # 2) RabbitMQ 준비 대기 (서비스 alias 가 rabbitmq 로 되어 있다면)
        /usr/local/bin/wait-for-it.sh rabbitmq:5672 --strict --timeout=60 &&
        # 3) pipeline.workers 설정 추가
        echo 'pipeline.workers: 1' >> /usr/share/logstash/config/logstash.yml &&
        # 4) 진짜 Logstash 진입점 실행
        exec /usr/local/bin/docker-entrypoint
      "
    networks:
      - elk-net

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    depends_on:
      - elasticsearch
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP="false" # 일반 사용자 가입 금지
      - GF_AUTH_ANONYMOUS_ENABLED="true" # 익명 조회 허용

    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    networks:
      - elk-net
    restart: unless-stopped

networks:
  elk-net:
    driver: bridge

volumes:
  grafana-data:
